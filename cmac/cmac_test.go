package cmac

import (
	"crypto/aes"
	"crypto/subtle"
	"fmt"
	"testing"
)

type inout struct {
	M          []byte
	CmacResult []byte
}

type testVector struct {
	Key []byte
	K1  []byte
	K2  []byte
	// AES-128(k, 0...)
	AesResult   []byte
	InputOutput []inout
}

/*
Test vectors are taken from https://tools.ietf.org/html/rfc4493#section-4
*/
var rfcTestData = &testVector{
	Key: []byte{
		0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
		0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
	},
	K1: []byte{
		0xfb, 0xee, 0xd6, 0x18, 0x35, 0x71, 0x33, 0x66,
		0x7c, 0x85, 0xe0, 0x8f, 0x72, 0x36, 0xa8, 0xde,
	},
	K2: []byte{
		0xf7, 0xdd, 0xac, 0x30, 0x6a, 0xe2, 0x66, 0xcc,
		0xf9, 0x0b, 0xc1, 0x1e, 0xe4, 0x6d, 0x51, 0x3b,
	},
	AesResult: []byte{
		0x7d, 0xf7, 0x6b, 0x0c, 0x1a, 0xb8, 0x99, 0xb3,
		0x3e, 0x42, 0xf0, 0x47, 0xb9, 0x1b, 0x54, 0x6f,
	},
	InputOutput: []inout{
		{
			M: []byte{}, // empty
			CmacResult: []byte{
				0xbb, 0x1d, 0x69, 0x29, 0xe9, 0x59, 0x37, 0x28,
				0x7f, 0xa3, 0x7d, 0x12, 0x9b, 0x75, 0x67, 0x46,
			},
		},
		{
			M: []byte{
				0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
				0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
			},
			CmacResult: []byte{
				0x07, 0x0a, 0x16, 0xb4, 0x6b, 0x4d, 0x41, 0x44,
				0xf7, 0x9b, 0xdd, 0x9d, 0xd0, 0x4a, 0x28, 0x7c,
			},
		},
		{
			M: []byte{
				0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
				0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
				0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
				0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
				0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
			},
			CmacResult: []byte{
				0xdf, 0xa6, 0x67, 0x47, 0xde, 0x9a, 0xe6, 0x30,
				0x30, 0xca, 0x32, 0x61, 0x14, 0x97, 0xc8, 0x27,
			},
		},
		{
			M: []byte{
				0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
				0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
				0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
				0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
				0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
				0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
				0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
				0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
			},
			CmacResult: []byte{
				0x51, 0xf0, 0xbe, 0xbf, 0x7e, 0x3b, 0x9d, 0x92,
				0xfc, 0x49, 0x74, 0x17, 0x79, 0x36, 0x3c, 0xfe,
			},
		},
	},
}

func testNewCmac(t *testing.T) {
	_, err := NewCmac(rfcTestData.Key)
	if err != nil {
		t.Error(err)
		t.Fail()
	}
}

func testCmacGenSubkeys(t *testing.T) {
	enc, err := aes.NewCipher(rfcTestData.Key)
	if err != nil {
		t.Error(err)
		t.Fail()
		return
	}

	c := cmac{
		aesEncryptor: enc,
		key:          rfcTestData.Key,
	}

	c.init()

	if subtle.ConstantTimeCompare(c.k1, rfcTestData.K1) != 1 {
		t.Error("failed to generate proper subkeys, k1 check failed")
		t.Fail()
		return
	}

	if subtle.ConstantTimeCompare(c.k2, rfcTestData.K2) != 1 {
		t.Error("failed to generate proper subkeys, k2 check failed")
		t.Fail()
	}
}

func testRfcData(t *testing.T, key, in, out []byte) {
	c, err := NewCmac(key)
	if err != nil {
		t.Error(err)
		t.Fail()
		return
	}

	c.Write(in)
	result := c.Sum(nil)

	if subtle.ConstantTimeCompare(result, out) != 1 {
		t.Fail()
	}
}

func TestCmac(t *testing.T) {
	t.Run("generate subkeys check", testCmacGenSubkeys)
	t.Run("create cmac test", testNewCmac)

	for i := range rfcTestData.InputOutput {
		t.Run(fmt.Sprintf("rfc test %d, input len = %d", i, len(rfcTestData.InputOutput[i].M)), func(t *testing.T) {
			testRfcData(t, rfcTestData.Key, rfcTestData.InputOutput[i].M, rfcTestData.InputOutput[i].CmacResult)
		})
	}
}

/*
See https://tools.ietf.org/html/rfc5297#appendix-A.1
Result of CMAC(zero)
*/
func TestCmacFromAesSivRFC(t *testing.T) {
	key := []byte{
		0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8,
		0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0,
	}

	zeroResult := []byte{
		0x0e, 0x04, 0xdf, 0xaf, 0xc1, 0xef, 0xbf, 0x04,
		0x01, 0x40, 0x58, 0x28, 0x59, 0xbf, 0x07, 0x3a,
	}

	ad := []byte{
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
		0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
	}

	adSum := []byte{
		0xf1, 0xf9, 0x22, 0xb7, 0xf5, 0x19, 0x3c, 0xe6,
		0x4f, 0xf8, 0x0c, 0xb4, 0x7d, 0x93, 0xf2, 0x3b,
	}

	finalXor := []byte{
		0xca, 0xc3, 0x08, 0x94, 0xb8, 0xea, 0xf2, 0x54,
		0x03, 0x5b, 0xc2, 0x05, 0x40, 0x35, 0x78, 0x19,
	}

	finalResult := []byte{
		0x85, 0x63, 0x2d, 0x07, 0xc6, 0xe8, 0xf3, 0x7f,
		0x95, 0x0a, 0xcd, 0x32, 0x0a, 0x2e, 0xcc, 0x93,
	}

	sum := Sum(key, zero)
	if subtle.ConstantTimeCompare(sum, zeroResult) != 1 {
		t.Fail()
		return
	}

	sum2 := Sum(key, ad)
	if subtle.ConstantTimeCompare(sum2, adSum) != 1 {
		t.Fail()
		return
	}

	sum3 := Sum(key, finalXor)
	if subtle.ConstantTimeCompare(finalResult, sum3) != 1 {
		t.Fail()
	}
}

func TestCmac192(t *testing.T) {
	key := []byte{
		0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8,
		0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0,
		0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
	}

	message := []byte{
		0x0, 0x01, 0x02,
	}

	result := []byte{
		0xca, 0xa7, 0x3a, 0x23, 0xa8, 0xd1, 0x4b, 0x21,
		0x15, 0x41, 0xb6, 0xdb, 0xeb, 0x3d, 0x64, 0x23,
	}

	sum := Sum(key, message)
	if subtle.ConstantTimeCompare(result, sum) != 1 {
		t.Fail()
	}
}

func TestCmac256(t *testing.T) {
	key := []byte{
		0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8,
		0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0,
		0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
		0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
	}

	message := []byte{
		0x00, 0x01, 0x02,
	}

	result := []byte{
		0xb1, 0xd3, 0xbe, 0xfe, 0x30, 0x95, 0xd8, 0xdb,
		0x57, 0xc9, 0x37, 0xdc, 0xb8, 0x9b, 0x1e, 0xfe,
	}

	sum := Sum(key, message)
	if subtle.ConstantTimeCompare(result, sum) != 1 {
		t.Fail()
	}
}
